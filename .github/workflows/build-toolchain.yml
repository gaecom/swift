name: Build Toolchain

on:
  push:
    branches:
      - swiftwasm
      - swiftwasm-release/5.3
  pull_request:
    branches:
      - swiftwasm
      - swiftwasm-release/5.3
jobs:
  build_toolchain:
    env:
      TOOLCHAIN_CHANNEL: DEVELOPMENT
    strategy:
      matrix:
        include:
          - build_os: ubuntu-18.04
            target: ubuntu18.04_x86_64
            run_full_test: false
            run_e2e_test: true
            build_hello_wasm: true

          - build_os: ubuntu-20.04
            target: ubuntu20.04_x86_64
            run_full_test: false
            run_e2e_test: true
            build_hello_wasm: true

          - build_os: ubuntu-20.04
            target: amazonlinux2_x86_64
            run_full_test: false
            run_e2e_test: false
            build_hello_wasm: false

          - build_os: macos-10.15
            target: macos_x86_64
            run_full_test: true
            run_e2e_test: true
            build_hello_wasm: true

    name: Target ${{ matrix.target }}
    timeout-minutes: 0
    runs-on: ${{ matrix.build_os }}
    steps:
      - name: Free disk space
        if: ${{ matrix.build_os == 'ubuntu-20.04' || matrix.build_os == 'ubuntu-18.04' }}
        run: |
          df -h
          sudo apt-get purge libgcc-9-dev gcc-9 libstdc++-9-dev clang-6.0 llvm-6.0
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo rm -rf /opt/hostedtoolcache
          sudo rm -rf /usr/share/dotnet
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h

      - uses: actions/checkout@v1
        with:
          path: swift

      - name: Prepare sccache timestamp
        id: cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - uses: actions/cache@v1
        with:
          path: ../build-cache
          key: ${{ matrix.target }}-sccache-v10-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.target }}-sccache-v10-

      - name: Select Xcode version
        if: ${{ matrix.build_os == 'macos-10.15' }}
        run: |
          sudo xcode-select --switch /Applications/Xcode_12.3.app/Contents/Developer/
          xcodebuild -version

      - name: Build ${{ matrix.target }} installable archive
        env:
          SKIP_XCODE_VERSION_CHECK: 1
        run: |

          case "${{ matrix.target }}" in
            "ubuntu20.04_x86_64" | "ubuntu18.04_x86_64" | "macos_x86_64")
              ./utils/webassembly/ci.sh
            ;;
            "amazonlinux2_x86_64")
              SWIFT_IMAGE=swiftwasm-amazonlinux2_x86_64:nightly-$GITHUB_SHA
              docker build --build-arg SWIFT_GIT_SHA=$GITHUB_SHA \
                           --tag $SWIFT_IMAGE ./utils/webassembly/amazonlinux
              docker run -v $GITHUB_WORKSPACE/../:/home/host-dir $SWIFT_IMAGE \
                cp -r /home/ec2-user/swift-wasm-$TOOLCHAIN_CHANNEL-SNAPSHOT-amazonlinux2_x86_64.tar.gz /home/host-dir
            ;;
            *)
              echo "Unrecognised target: ${{ matrix.target }}"
              exit 1
            ;;
          esac

      - name: Upload ${{ matrix.target }} installable archive
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.target }}-installable
          path: ../swift-wasm-${{ env.TOOLCHAIN_CHANNEL }}-SNAPSHOT-${{ matrix.target }}.tar.gz

      - name: Pack test results
        if: ${{ matrix.run_full_test }}
        working-directory: ${{ github.workspace }}/../
        run: |
          tar cJf ./swift/swift-test-results.tar.gz target-build/swift-stdlib-wasi-wasm32/swift-test-results
      - name: Upload test results
        uses: actions/upload-artifact@v1
        if: ${{ matrix.run_full_test }}
        with:
          name: ${{ matrix.target }}-test-results
          path: ./swift-test-results.tar.gz

      # Run e2e test
      - name: Run E2E test
        working-directory: ${{ github.workspace }}/../
        run: |
          tar xf swift-wasm-$TOOLCHAIN_CHANNEL-SNAPSHOT-${{ matrix.target }}.tar.gz
          echo "TOOLCHAIN=$(find "$PWD" -name "swift-wasm-$TOOLCHAIN_CHANNEL-*" -type d)" >> $GITHUB_ENV
      - name: Build hello.wasm
        shell: bash
        if: ${{ matrix.build_hello_wasm }}
        run: |
          echo 'print("Hello, world!")' > hello.swift
          $TOOLCHAIN/usr/bin/swiftc \
                -target wasm32-unknown-wasi \
                -sdk $TOOLCHAIN/usr/share/wasi-sysroot \
                hello.swift -o hello.wasm && \
                echo "Successfully linked hello.wasm"
      - name: Upload hello.wasm
        if: ${{ matrix.build_hello_wasm }}
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.target }}-hello.wasm
          path: hello.wasm
      - name: Checkout integration-tests
        if: ${{ matrix.run_e2e_test }}
        uses: actions/checkout@v2
        with:
          repository: swiftwasm/integration-tests
          path: integration-tests
      - name: Run integration tests
        if: ${{ matrix.run_e2e_test }}
        run: |
          swift run # Use TOOLCHAIN env value
        working-directory: ${{ github.workspace }}/integration-tests

